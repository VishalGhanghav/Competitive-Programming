package DynamicProgramming.src.dpMemoizationRecursion;
/*
We are given a rod of size ‘N’. It can be cut into pieces.
 Each length of a piece has a particular price given by the price array.
 Our task is to find the maximum revenue that can be generated by selling the rod after
 cutting( if required) into pieces.

Examples
Example:
2,5 ,7,8,10
 output:12
 2,5,5 length=1+2+2
 2,2,2,2,2 length=1+1+1+!+1


 */
public class RodCuttingProblem {
    public static void main(String args[]) {
        int arr[] = new int[]{2, 5, 7, 8, 10};
        int n = arr.length;
        int ans1 = rodCuttingProblem(arr, n-1, n);
        System.out.println(ans1);
    }

    private static int rodCuttingProblem(int[] prices, int ind, int n) {
        //if i am at 0th index,rodlength=1
        //example: {2,3,5} .if i came at index=0 and still 10+ rod length need to be covered
        //we will need {2,2,2,2,2} which is at price[0].Therefore, N*prices[i]
        if(ind==0){
           return n*prices[0];
        }
        //if length is less than n then we can take
        //if greater not take
        int rodLength=ind+1;
        if(rodLength<=n){
            return Math.max(prices[ind]+rodCuttingProblem(prices,ind,n-rodLength),
                    rodCuttingProblem(prices,ind-1,n));
        }else{
            return rodCuttingProblem(prices,ind-1,n);
        }
    }
}
